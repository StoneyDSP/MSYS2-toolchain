if(NOT _MSYS_MINGW64_TOOLCHAIN)
    set(_MSYS_MINGW64_TOOLCHAIN 1)
    message(STATUS "MinGW x64 toolchain loading...")

    # # set(ENABLE_MINGW64 ON CACHE BOOL "Enable sub-system: MinGW x64 <MINGW64>." FORCE)

    # Detect <Z_MSYS_ROOT_DIR>/mingw64.ini to figure MINGW64_ROOT_DIR
    set(Z_MINGW64_ROOT_DIR_CANDIDATE "${CMAKE_CURRENT_LIST_DIR}")
    while(NOT DEFINED Z_MINGW64_ROOT_DIR)
        if(EXISTS "${Z_MINGW64_ROOT_DIR_CANDIDATE}msys64/mingw64.ini")
            set(Z_MINGW64_ROOT_DIR "${Z_MINGW64_ROOT_DIR_CANDIDATE}msys64/mingw64" CACHE INTERNAL "MinGW64 root directory")
        elseif(IS_DIRECTORY "${Z_MINGW64_ROOT_DIR_CANDIDATE}")
            get_filename_component(Z_MINGW64_ROOT_DIR_TEMP "${Z_MINGW64_ROOT_DIR_CANDIDATE}" DIRECTORY)
            if(Z_MINGW64_ROOT_DIR_TEMP STREQUAL Z_MINGW64_ROOT_DIR_CANDIDATE)
                break() # If unchanged, we have reached the root of the drive without finding vcpkg.
            endif()
            set(Z_MINGW64_ROOT_DIR_CANDIDATE "${Z_MINGW64_ROOT_DIR_TEMP}")
            unset(Z_MINGW64_ROOT_DIR_TEMP)
        else()
            message(WARNING "Could not find 'mingw64.ini'... Check your installation!")
            break()
        endif()
    endwhile()
    unset(Z_MINGW64_ROOT_DIR_CANDIDATE)

    if(MSYSTEM STREQUAL "MINGW64")

        # Need to override MinGW from MSYS_CMAKE_SYSTEM_NAME
        set(CMAKE_SYSTEM Windows)
        set(CMAKE_SYSTEM_NAME Windows CACHE STRING "The name of the operating system for which CMake is to build." FORCE)
        set(CMAKE_SYSTEM_PROCESSOR x86_64 CACHE STRING "When not cross-compiling, this variable has the same value as the ``CMAKE_HOST_SYSTEM_PROCESSOR`` variable." FORCE)

        set(CARCH "x86_64")
        set(CHOST "x86_64-w64-mingw32")
        set(MINGW_CHOST "x86_64-w64-mingw32")
        set(MINGW_PREFIX "/mingw64")
        set(MINGW_PACKAGE_PREFIX "mingw-w64-x86_64")
        set(MINGW_MOUNT_POINT "${MINGW_PREFIX}")

        set(MSYSTEM_TITLE               "MinGW x64"                         CACHE STRING    "MinGW x64: Name of the build system." FORCE)
        set(MSYSTEM_TOOLCHAIN_VARIANT   gcc                                 CACHE STRING    "MinGW x64: Identification string of the compiler toolchain variant." FORCE)
        set(MSYSTEM_CRT_LIBRARY         msvcrt                              CACHE STRING    "MinGW x64: Identification string of the C Runtime variant. Can be 'ucrt' (modern, 64-bit only) or 'msvcrt' (compatibilty for legacy builds)." FORCE)
        set(MSYSTEM_CXX_STD_LIBRARY     libstdc++                           CACHE STRING    "MinGW x64: Identification string of the C++ Standard Library variant. Can be 'libstdc++' (GNU implementation) or 'libc++' (LLVM implementation)." FORCE)
        set(MSYSTEM_PREFIX              "/mingw64"                          CACHE STRING    "MinGW x64: Sub-system prefix." FORCE)
        set(MSYSTEM_ARCH                "x86_64"                            CACHE STRING    "MinGW x64: Sub-system architecture." FORCE)
        set(MSYSTEM_PLAT                "x86_64-w64-mingw32"                CACHE STRING    "MinGW x64: Sub-system name string." FORCE)
        set(MSYSTEM_PACKAGE_PREFIX      "mingw-w64-x86_64"                  CACHE STRING    "MinGW x64: Sub-system package prefix." FORCE)
        set(MSYSTEM_ROOT                "${Z_MINGW64_ROOT_DIR}"     CACHE PATH      "MinGW x64: Root of the build system." FORCE)

        # include("${CMAKE_CURRENT_LIST_DIR}/profiles/MINGW64/MINGW64-Tools.cmake")

    endif()

    if(CMAKE_HOST_SYSTEM_NAME STREQUAL "${CMAKE_SYSTEM_NAME}")
        set(CMAKE_CROSSCOMPILING OFF CACHE BOOL "Intended to indicate whether CMake is cross compiling, but note limitations discussed below.")
    endif()

    set(MINGW64_ROOT                    "${Z_MINGW64_ROOT_DIR}"             CACHE PATH      "<MINGW64>: Root of the build system." FORCE)

    set(MINGW64_TITLE                   "MinGW x64"                         CACHE STRING    "<MINGW64>: Name of the build system." FORCE)
    set(MINGW64_PACKAGE_PREFIX          "mingw-w64-x86_64"                  CACHE STRING    "<MINGW64>: Sub-system package prefix." FORCE)
    set(MINGW64_TOOLCHAIN_VARIANT       gcc                                 CACHE STRING    "<MINGW64>: Identification string of the compiler toolchain variant." FORCE)
    set(MINGW64_CRT_LIBRARY             msvcrt                              CACHE STRING    "<MINGW64>: Identification string of the C Runtime variant. Can be 'ucrt' (modern, 64-bit only) or 'msvcrt' (compatibilty for legacy builds)." FORCE)
    set(MINGW64_CRT_LINKAGE             static                              CACHE STRING    "<MINGW64>: C Runtime Library linkage type." FORCE)
    set(MINGW64_CXX_STD_LIBRARY         libstdc++                           CACHE STRING    "<MINGW64>: Identification string of the C++ Standard Library variant. Can be 'libstdc++' (GNU implementation) or 'libc++' (LLVM implementation)." FORCE)
    set(MINGW64_ARCH                    "x86_64"                            CACHE STRING    "<MINGW64>: Sub-system architecture." FORCE)
    set(MINGW64_PLAT                    "x86_64-w64-mingw32"                CACHE STRING    "<MINGW64>: Sub-system name string." FORCE)

    set(MINGW64_PREFIX                  "${MINGW64_ROOT}"                   CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_BUILD_PREFIX            "${MINGW64_PREFIX}/usr"             CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_INSTALL_PREFIX          "${MINGW64_PREFIX}/usr/local"       CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)

    set(MINGW64_INCLUDEDIR              "${MINGW64_PREFIX}/include"         CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_SRCDIR                  "${MINGW64_PREFIX}/src"             CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_SYSCONFDIRDIR           "${MINGW64_PREFIX}/etc"             CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)

    set(MINGW64_DATAROOTDIR             "${MINGW64_PREFIX}/share"           CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_DATADIR                 "${MINGW64_DATAROOTDIR}"            CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_DOCDIR                  "${MINGW64_DATAROOTDIR}/doc"        CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_MANDIR                  "${MINGW64_DATAROOTDIR}/man"        CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_INFODIR                 "${MINGW64_DATAROOTDIR}/info"       CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_LOCALEDIR               "${MINGW64_DATAROOTDIR}/locale"     CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)

    set(MINGW64_CMAKEDIR                "${MINGW64_DATAROOTDIR}/cmake"      CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)

    set(MINGW64_EXEC_PREFIX             "${MINGW64_PREFIX}"                 CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_BINDIR                  "${MINGW64_EXEC_PREFIX}/bin"        CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_SBINDIR                 "${MINGW64_EXEC_PREFIX}/sbin"       CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_LIBDIR                  "${MINGW64_EXEC_PREFIX}/lib"        CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)
    set(MINGW64_LIBEXECDIR              "${MINGW64_EXEC_PREFIX}/libexec"    CACHE PATH      "<MINGW64>: Sub-system prefix." FORCE)

    # DirectX compatibility environment variable
    set(MINGW64_DXSDK_DIR               "${MINGW64_ROOT}/x86_64-w64-mingw32"    CACHE PATH "<MINGW64>: DirectX compatibility environment variable." FORCE)

    # set(ACLOCAL_PATH "${Z_MSYS_ROOT}/${MINGW_PREFIX}/share/aclocal" "${Z_MSYS_ROOT}/usr/share" CACHE PATH "By default, aclocal searches for .m4 files in the following directories." FORCE)
    set(MINGW64_ACLOCAL_PATH)
    list(APPEND MINGW64_ACLOCAL_PATH "${Z_MINGW64_ROOT_DIR}/share/aclocal")
    list(APPEND MINGW64_ACLOCAL_PATH "${Z_MINGW64_ROOT_DIR}/usr/share")
    set(MINGW64_ACLOCAL_PATH "${MINGW64_ACLOCAL_PATH}" CACHE PATH "<MINGW64>: DirectX compatibility environment variable." FORCE)

    # set(PKG_CONFIG_PATH "${Z_MSYS_ROOT}/${MINGW_PREFIX}/lib/pkgconfig" "${Z_MSYS_ROOT}/${MINGW_PREFIX}/share/pkgconfig" CACHE PATH "A colon-separated (on Windows, semicolon-separated) list of directories to search for .pc files. The default directory will always be searched after searching the path." FORCE)
    set(MINGW64_PKG_CONFIG_PATH)
    list(APPEND MINGW64_PKG_CONFIG_PATH "${Z_MINGW64_ROOT_DIR}/lib/pkgconfig")
    list(APPEND MINGW64_PKG_CONFIG_PATH "${Z_MINGW64_ROOT_DIR}/share/pkgconfig")
    set(MINGW64_PKG_CONFIG_PATH "${MINGW64_PKG_CONFIG_PATH}" CACHE PATH "<MINGW64>: DirectX compatibility environment variable." FORCE)

    # Set toolchain package suffixes (i.e., '{mingw-w64-clang-x86_64}-avr-toolchain')...
    set(MINGW64_TOOLCHAIN_NATIVE_ARM_NONE_EABI          "mingw-w64-x86_64-arm-none-eabi-toolchain" CACHE STRING "" FORCE)
    set(MINGW64_TOOLCHAIN_NATIVE_AVR                    "mingw-w64-x86_64-avr-toolchain" CACHE STRING "" FORCE)
    set(MINGW64_TOOLCHAIN_NATIVE_RISCV64_UNKOWN_ELF     "mingw-w64-x86_64-riscv64-unknown-elf-toolchain" CACHE STRING "The 'unknown elf' toolchain! Careful with this elf, it is not known." FORCE)
    set(MINGW64_TOOLCHAIN_NATIVE                        "mingw-w64-x86_64-toolchain" CACHE STRING "" FORCE)

    find_program(MINGW64_AR         "${MINGW64_BINDIR}/ar.exe")
    find_program(MINGW64_AS         "${MINGW64_BINDIR}/as.exe")
    find_program(MINGW64_LD         "${MINGW64_BINDIR}/ld.exe")
    find_program(MINGW64_MT         "${MINGW64_BINDIR}/mt.exe")
    find_program(MINGW64_NM         "${MINGW64_BINDIR}/nm.exe")

    mark_as_advanced(MINGW64_AR)
    mark_as_advanced(MINGW64_AS)
    mark_as_advanced(MINGW64_LD)
    mark_as_advanced(MINGW64_MT)
    mark_as_advanced(MINGW64_NM)

    set(MINGW64_AR         "${MINGW64_AR}" CACHE FILEPATH "<MINGW64>: The full path to the <AR> utility." FORCE)
    set(MINGW64_AS         "${MINGW64_AS}" CACHE FILEPATH "<MINGW64>: The full path to the <AS> utility." FORCE)
    set(MINGW64_LD         "${MINGW64_LD}" CACHE FILEPATH "<MINGW64>: The full path to the <LD> utility." FORCE)
    set(MINGW64_MT         "${MINGW64_MT}" CACHE FILEPATH "<MINGW64>: The full path to the <MT> utility." FORCE)
    set(MINGW64_NM         "${MINGW64_NM}" CACHE FILEPATH "<MINGW64>: The full path to the <NM> utility." FORCE)

    find_program(MINGW64_ADDR2LINE  "${MINGW64_BINDIR}/addr2line.exe")
    find_program(MINGW64_DLLTOOL    "${MINGW64_BINDIR}/dlltool.exe")
    find_program(MINGW64_LINKER     "${MINGW64_BINDIR}/ld.exe")
    find_program(MINGW64_MAKE       "${MINGW64_BINDIR}/mingw32-make.exe")
    find_program(MINGW64_OBJCOPY    "${MINGW64_BINDIR}/objcopy.exe")
    find_program(MINGW64_OBJDUMP    "${MINGW64_BINDIR}/objdump.exe")
    find_program(MINGW64_RANLIB     "${MINGW64_BINDIR}/ranlib.exe")
    find_program(MINGW64_READELF    "${MINGW64_BINDIR}/readelf.exe")
    find_program(MINGW64_STRIP      "${MINGW64_BINDIR}/strip.exe")

    mark_as_advanced(MINGW64_ADDR2LINE)
    mark_as_advanced(MINGW64_DLLTOOL)
    mark_as_advanced(MINGW64_LINKER)
    mark_as_advanced(MINGW64_MAKE)
    mark_as_advanced(MINGW64_OBJCOPY)
    mark_as_advanced(MINGW64_OBJDUMP)
    mark_as_advanced(MINGW64_RANLIB)
    mark_as_advanced(MINGW64_READELF)
    mark_as_advanced(MINGW64_STRIP)

    set(MINGW64_ADDR2LINE  "${MINGW64_ADDR2LINE}" CACHE FILEPATH "<MINGW64>: The full path to the 'addr2line' utility." FORCE)
    set(MINGW64_DLLTOOL    "${MINGW64_DLLTOOL}" CACHE FILEPATH "<MINGW64>: The full path to the 'dlltool' utility." FORCE)
    set(MINGW64_LINKER     "${MINGW64_LINKER}" CACHE FILEPATH "<MINGW64>: The full path to the linker utility." FORCE)
    set(MINGW64_MAKE       "${MINGW64_MAKE}" CACHE FILEPATH "<MINGW64>: The full path to the <MAKE> utility." FORCE)
    set(MINGW64_OBJCOPY    "${MINGW64_OBJCOPY}" CACHE FILEPATH "<MINGW64>: The full path to the 'objcopy' utility." FORCE)
    set(MINGW64_OBJDUMP    "${MINGW64_BINDIR}" CACHE FILEPATH "<MINGW64>: The full path to the 'objdump' utility." FORCE)
    set(MINGW64_RANLIB     "${MINGW64_BINDIR}" CACHE FILEPATH "<MINGW64>: The full path to the 'ranlib' utility." FORCE)
    set(MINGW64_READELF    "${MINGW64_BINDIR}" CACHE FILEPATH "<MINGW64>: The full path to the 'readelf' utility." FORCE)
    set(MINGW64_STRIP      "${MINGW64_BINDIR}" CACHE FILEPATH "<MINGW64>: The full path to the 'strip' utility." FORCE)

    # # set(CMAKE_HOST_SYSTEM "Windows-10.0.22621")
    # # set(CMAKE_HOST_SYSTEM_NAME "Windows")
    # # set(CMAKE_HOST_SYSTEM_VERSION "10.0.22621")
    # # set(CMAKE_HOST_SYSTEM_PROCESSOR "AMD64")
    # # set(CMAKE_SYSTEM "Windows")
    # # set(CMAKE_SYSTEM_NAME "Windows")
    # # set(CMAKE_SYSTEM_VERSION "")

    # set(__USE_MINGW_ANSI_STDIO  "1")                                   # CACHE STRING   "Use the MinGW ANSI definition for 'stdio.h'." FORCE)
    # set(_FORTIFY_SOURCE         "2")                                   # CACHE STRING   "Fortify source definition." FORCE)

    ##-- <CC>
    if(NOT _MINGW64_C_COMPILER_ID_RUN)
        set(_MINGW64_C_COMPILER_ID_RUN 1)

        set(MINGW64_C_COMPILER_ENV_VAR "CC")
        set(MINGW64_C_COMPILER_ID_RUN 1)
        set(MINGW64_COMPILER_IS_GNUCC 1)

        mark_as_advanced(MINGW64_C_COMPILER_ENV_VAR)
        mark_as_advanced(MINGW64_C_COMPILER_ID_RUN)
        mark_as_advanced(MINGW64_COMPILER_IS_GNUCC)

        find_program(MINGW64_C_COMPILER              "${Z_MINGW64_ROOT_DIR}/bin/x86_64-w64-mingw32-gcc.exe")
        find_program(MINGW64_C_COMPILER_AR           "${Z_MINGW64_ROOT_DIR}/bin/gcc-ar.exe")
        find_program(MINGW64_C_COMPILER_RANLIB       "${Z_MINGW64_ROOT_DIR}/bin/gcc-ranlib.exe")

        set(MINGW64_C_COMPILER              "${MINGW64_C_COMPILER}")
        set(MINGW64_C_COMPILER_AR           "${MINGW64_C_COMPILER_AR}")
        set(MINGW64_C_COMPILER_RANLIB       "${MINGW64_C_COMPILER_RANLIB}")

        mark_as_advanced(MINGW64_C_COMPILER)
        mark_as_advanced(MINGW64_C_COMPILER_AR)
        mark_as_advanced(MINGW64_C_COMPILER_RANLIB)

        set(MINGW64_C_PLATFORM_ID                   "MinGW")
        set(MINGW64_C_COMPILER_ID                   "GNU")
        set(MINGW64_C_COMPILER_VERSION              "13.1.0")
        set(MINGW64_C_COMPILER_VERSION_INTERNAL     "")
        set(MINGW64_C_COMPILER_FRONTEND_VARIANT     "GNU")
        set(MINGW64_C_SIMULATE_ID                   "")
        set(MINGW64_C_SIMULATE_VERSION              "")
        set(MINGW64_C_STANDARD_COMPUTED_DEFAULT     "17")
        set(MINGW64_C_EXTENSIONS_COMPUTED_DEFAULT   "ON")

        mark_as_advanced(MINGW64_C_PLATFORM_ID)
        mark_as_advanced(MINGW64_C_COMPILER_ID)
        mark_as_advanced(MINGW64_C_COMPILER_VERSION)
        mark_as_advanced(MINGW64_C_COMPILER_VERSION_INTERNAL)
        mark_as_advanced(MINGW64_C_COMPILER_FRONTEND_VARIANT)
        mark_as_advanced(MINGW64_C_SIMULATE_ID)
        mark_as_advanced(MINGW64_C_SIMULATE_VERSION)
        mark_as_advanced(MINGW64_C_STANDARD_COMPUTED_DEFAULT)
        mark_as_advanced(MINGW64_C_EXTENSIONS_COMPUTED_DEFAULT)

        set(MINGW64_C90_COMPILE_FEATURES)
        list(APPEND MINGW64_C90_COMPILE_FEATURES c_std_90)
        list(APPEND MINGW64_C90_COMPILE_FEATURES c_function_prototypes)
        set(MINGW64_C90_COMPILE_FEATURES "${MINGW64_C90_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_C90_COMPILE_FEATURES)

        set(MINGW64_C99_COMPILE_FEATURES)
        list(APPEND MINGW64_C90_COMPILE_FEATURES c_std_99)
        list(APPEND MINGW64_C90_COMPILE_FEATURES c_restrict)
        list(APPEND MINGW64_C90_COMPILE_FEATURES c_variadic_macros)
        set(MINGW64_C99_COMPILE_FEATURES "${MINGW64_C99_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_C99_COMPILE_FEATURES)

        set(MINGW64_C11_COMPILE_FEATURES)
        list(APPEND MINGW64_C11_COMPILE_FEATURES c_std_11)
        list(APPEND MINGW64_C11_COMPILE_FEATURES c_static_assert)
        set(MINGW64_C11_COMPILE_FEATURES "${MINGW64_C11_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_C11_COMPILE_FEATURES)

        set(MINGW64_C17_COMPILE_FEATURES)
        list(APPEND MINGW64_C17_COMPILE_FEATURES c_std_17)
        set(MINGW64_C17_COMPILE_FEATURES "${MINGW64_C17_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_C17_COMPILE_FEATURES)

        set(MINGW64_C23_COMPILE_FEATURES)
        list(APPEND MINGW64_C23_COMPILE_FEATURES c_std_23)
        set(MINGW64_C23_COMPILE_FEATURES "${MINGW64_C23_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_C23_COMPILE_FEATURES)

        set(MINGW64_C_COMPILE_FEATURES)
        list(APPEND MINGW64_C_COMPILE_FEATURES "${MINGW64_C90_COMPILE_FEATURES}")
        list(APPEND MINGW64_C_COMPILE_FEATURES "${MINGW64_C99_COMPILE_FEATURES}")
        list(APPEND MINGW64_C_COMPILE_FEATURES "${MINGW64_C11_COMPILE_FEATURES}")
        list(APPEND MINGW64_C_COMPILE_FEATURES "${MINGW64_C17_COMPILE_FEATURES}")
        list(APPEND MINGW64_C_COMPILE_FEATURES "${MINGW64_C23_COMPILE_FEATURES}")
        set(MINGW64_C_COMPILE_FEATURES "${MINGW64_C_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_C_COMPILE_FEATURES)

        set(MINGW64_C_IMPLICIT_INCLUDE_DIRECTORIES)
        list(APPEND MINGW64_C_IMPLICIT_INCLUDE_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/lib/gcc/x86_64-w64-mingw32/${MINGW64_C_COMPILER_VERSION}/include-fixed")
        list(APPEND MINGW64_C_IMPLICIT_INCLUDE_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/lib/gcc/x86_64-w64-mingw32/${MINGW64_C_COMPILER_VERSION}/include")
        list(APPEND MINGW64_C_IMPLICIT_INCLUDE_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/include")
        set(MINGW64_C_IMPLICIT_INCLUDE_DIRECTORIES "${MINGW64_C_IMPLICIT_INCLUDE_DIRECTORIES}")
        mark_as_advanced(MINGW64_C_IMPLICIT_INCLUDE_DIRECTORIES)

        set(MINGW64_C_IMPLICIT_LINK_DIRECTORIES)
        list(APPEND MINGW64_C_IMPLICIT_LINK_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/lib/gcc/x86_64-w64-mingw32/${MINGW64_C_COMPILER_VERSION}")
        list(APPEND MINGW64_C_IMPLICIT_LINK_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/lib/gcc")
        list(APPEND MINGW64_C_IMPLICIT_LINK_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/x86_64-w64-mingw32/lib")
        list(APPEND MINGW64_C_IMPLICIT_LINK_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/lib")
        set(MINGW64_C_IMPLICIT_LINK_DIRECTORIES "${MINGW64_C_IMPLICIT_LINK_DIRECTORIES}")
        mark_as_advanced(MINGW64_C_IMPLICIT_LINK_DIRECTORIES)

        set(MINGW64_C_IMPLICIT_LINK_LIBRARIES)
        list(APPEND MINGW64_C_IMPLICIT_LINK_LIBRARIES mingw32)
        list(APPEND MINGW64_C_IMPLICIT_LINK_LIBRARIES gcc)
        list(APPEND MINGW64_C_IMPLICIT_LINK_LIBRARIES moldname)
        list(APPEND MINGW64_C_IMPLICIT_LINK_LIBRARIES mingwex)
        list(APPEND MINGW64_C_IMPLICIT_LINK_LIBRARIES pthread)
        list(APPEND MINGW64_C_IMPLICIT_LINK_LIBRARIES advapi32)
        list(APPEND MINGW64_C_IMPLICIT_LINK_LIBRARIES shell32)
        list(APPEND MINGW64_C_IMPLICIT_LINK_LIBRARIES user32)
        list(APPEND MINGW64_C_IMPLICIT_LINK_LIBRARIES kernel32)
        set(MINGW64_C_IMPLICIT_LINK_LIBRARIES "${MINGW64_C_IMPLICIT_LINK_LIBRARIES}")
        mark_as_advanced(MINGW64_C_IMPLICIT_LINK_LIBRARIES)

        set(MINGW64_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")
        mark_as_advanced(MINGW64_C_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES)

        set(MINGW64_C_SOURCE_FILE_EXTENSIONS)
        list(APPEND MINGW64_C_SOURCE_FILE_EXTENSIONS c)
        list(APPEND MINGW64_C_SOURCE_FILE_EXTENSIONS m)
        set(MINGW64_C_SOURCE_FILE_EXTENSIONS "${MINGW64_C_SOURCE_FILE_EXTENSIONS}")
        mark_as_advanced(MINGW64_C_SOURCE_FILE_EXTENSIONS)

        set(MINGW64_C_IGNORE_EXTENSIONS)
        list(APPEND MINGW64_C_IGNORE_EXTENSIONS h)
        list(APPEND MINGW64_C_IGNORE_EXTENSIONS H)
        list(APPEND MINGW64_C_IGNORE_EXTENSIONS o)
        list(APPEND MINGW64_C_IGNORE_EXTENSIONS O)
        list(APPEND MINGW64_C_IGNORE_EXTENSIONS obj)
        list(APPEND MINGW64_C_IGNORE_EXTENSIONS OBJ)
        list(APPEND MINGW64_C_IGNORE_EXTENSIONS def)
        list(APPEND MINGW64_C_IGNORE_EXTENSIONS DEF)
        list(APPEND MINGW64_C_IGNORE_EXTENSIONS rc)
        list(APPEND MINGW64_C_IGNORE_EXTENSIONS RC)
        set(MINGW64_C_IGNORE_EXTENSIONS "${MINGW64_C_IGNORE_EXTENSIONS}")
        mark_as_advanced(MINGW64_C_IGNORE_EXTENSIONS)

        set(MINGW64_C_CL_SHOWINCLUDES_PREFIX "")
        mark_as_advanced(MINGW64_C_CL_SHOWINCLUDES_PREFIX)

        set(MINGW64_C_FLAGS)
        string(APPEND MINGW64_C_FLAGS " -march=nocona ")
        string(APPEND MINGW64_C_FLAGS " -msahf ")
        string(APPEND MINGW64_C_FLAGS " -mtune=generic ")
        string(APPEND MINGW64_C_FLAGS " -pipe ")
        string(APPEND MINGW64_C_FLAGS " -Wp,-D_FORTIFY_SOURCE=2 ")
        string(APPEND MINGW64_C_FLAGS " -fstack-protector-strong ")
        set(MINGW64_C_FLAGS "${MINGW64_C_FLAGS}")
        mark_as_advanced(MINGW64_C_FLAGS)

        set(MINGW64_C_FLAGS_DEBUG)
        string(APPEND MINGW64_C_FLAGS_DEBUG " -ggdb ")
        string(APPEND MINGW64_C_FLAGS_DEBUG " -Og ")
        set(MINGW64_C_FLAGS_DEBUG "${MINGW64_C_FLAGS_DEBUG}")
        mark_as_advanced(MINGW64_C_FLAGS_DEBUG)

        set(MINGW64_C_FLAGS_RELEASE)
        string(APPEND MINGW64_C_FLAGS_RELEASE " -O2 ")
        string(APPEND MINGW64_C_FLAGS_RELEASE " -DNDEBUG ")
        set(MINGW64_C_FLAGS_RELEASE "${MINGW64_C_FLAGS_RELEASE}")
        mark_as_advanced(MINGW64_C_FLAGS_RELEASE)

        set(MINGW64_C_FLAGS_MINSIZEREL)
        string(APPEND MINGW64_C_FLAGS_MINSIZEREL " -Os ")
        string(APPEND MINGW64_C_FLAGS_MINSIZEREL " -DNDEBUG ")
        set(MINGW64_C_FLAGS_MINSIZEREL "${MINGW64_C_FLAGS_MINSIZEREL}")
        mark_as_advanced(MINGW64_C_FLAGS_MINSIZEREL)

        set(MINGW64_C_FLAGS_RELWITHDEBINFO)
        string(APPEND MINGW64_C_FLAGS_RELWITHDEBINFO " -ggdb ")
        string(APPEND MINGW64_C_FLAGS_RELWITHDEBINFO " -O2 ")
        set(MINGW64_C_FLAGS_RELWITHDEBINFO "${MINGW64_C_FLAGS_RELWITHDEBINFO}")
        mark_as_advanced(MINGW64_C_FLAGS_RELWITHDEBINFO)

    endif() # if(NOT _MINGW64_CXX_COMPILER_ID_RUN)

    ##-- <CXX>
    if(NOT _MINGW64_CXX_COMPILER_ID_RUN)
    set(_MINGW64_CXX_COMPILER_ID_RUN 1)

        set(MINGW64_CXX_COMPILER_ENV_VAR "CXX")
        set(MINGW64_CXX_COMPILER_ID_RUN 1)
        set(MINGW64_COMPILER_IS_GNUCXX 1)

        mark_as_advanced(MINGW64_CXX_COMPILER_ENV_VAR)
        mark_as_advanced(MINGW64_CXX_COMPILER_ID_RUN)
        mark_as_advanced(MINGW64_COMPILER_IS_GNUCXX)

        find_program(MINGW64_CXX_COMPILER            "${Z_MINGW64_ROOT_DIR}/bin/x86_64-w64-mingw32-g++.exe")
        find_program(MINGW64_CXX_COMPILER_AR         "${Z_MINGW64_ROOT_DIR}/bin/gcc-ar.exe")
        find_program(MINGW64_CXX_COMPILER_RANLIB     "${Z_MINGW64_ROOT_DIR}/bin/gcc-ranlib.exe")

        set(MINGW64_CXX_COMPILER            "${MINGW64_CXX_COMPILER}")
        set(MINGW64_CXX_COMPILER_AR         "${MINGW64_CXX_COMPILER_AR}")
        set(MINGW64_CXX_COMPILER_RANLIB     "${MINGW64_CXX_COMPILER_RANLIB}")

        mark_as_advanced(MINGW64_CXX_COMPILER)
        mark_as_advanced(MINGW64_CXX_COMPILER_AR)
        mark_as_advanced(MINGW64_CXX_COMPILER_RANLIB)

        set(MINGW64_CXX_PLATFORM_ID                 "MinGW")
        set(MINGW64_CXX_COMPILER_ID                 "GNU")
        set(MINGW64_CXX_COMPILER_VERSION            "13.1.0")
        set(MINGW64_CXX_COMPILER_VERSION_INTERNAL   "")
        set(MINGW64_CXX_COMPILER_FRONTEND_VARIANT   "GNU")
        set(MINGW64_CXX_SIMULATE_ID                 "")
        set(MINGW64_CXX_SIMULATE_VERSION            "")
        set(MINGW64_CXX_STANDARD_COMPUTED_DEFAULT   "17")
        set(MINGW64_CXX_EXTENSIONS_COMPUTED_DEFAULT "ON")

        mark_as_advanced(MINGW64_CXX_PLATFORM_ID)
        mark_as_advanced(MINGW64_CXX_COMPILER_ID)
        mark_as_advanced(MINGW64_CXX_COMPILER_VERSION)
        mark_as_advanced(MINGW64_CXX_COMPILER_VERSION_INTERNAL)
        mark_as_advanced(MINGW64_CXX_COMPILER_FRONTEND_VARIANT)
        mark_as_advanced(MINGW64_CXX_SIMULATE_ID)
        mark_as_advanced(MINGW64_CXX_SIMULATE_VERSION)
        mark_as_advanced(MINGW64_CXX_STANDARD_COMPUTED_DEFAULT)
        mark_as_advanced(MINGW64_CXX_EXTENSIONS_COMPUTED_DEFAULT)

        set(MINGW64_CXX98_COMPILE_FEATURES)
        list(APPEND MINGW64_CXX98_COMPILE_FEATURES cxx_std_98)
        list(APPEND MINGW64_CXX98_COMPILE_FEATURES cxx_template_template_parameters)
        set(MINGW64_CXX98_COMPILE_FEATURES "${MINGW64_CXX98_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_CXX98_COMPILE_FEATURES)

        set(MINGW64_CXX11_COMPILE_FEATURES)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_std_11)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_alias_templates)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_alignas)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_alignof)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_attributes)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_auto_type)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_constexpr)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_decltype)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_decltype_incomplete_return_types)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_default_function_template_args)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_defaulted_functions)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_defaulted_move_initializers)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_delegating_constructors)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_deleted_functions)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_enum_forward_declarations)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_explicit_conversions)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_extended_friend_declarations)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_extern_templates)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_final)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_func_identifier)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_generalized_initializers)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_inheriting_constructors)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_inline_namespaces)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_lambdas)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_local_type_template_args)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_long_long_type)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_noexcept)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_nonstatic_member_init)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_nullptr)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_override)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_range_for)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_raw_string_literals)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_reference_qualified_functions)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_right_angle_brackets)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_rvalue_references)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_sizeof_member)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_static_assert)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_strong_enums)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_thread_local)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_trailing_return_types)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_unicode_literals)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_uniform_initialization)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_unrestricted_unions)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_user_literals)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_variadic_macros)
        list(APPEND MINGW64_CXX11_COMPILE_FEATURES cxx_variadic_templates)
        set(MINGW64_CXX11_COMPILE_FEATURES "${MINGW64_CXX11_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_CXX11_COMPILE_FEATURES)

        set(MINGW64_CXX14_COMPILE_FEATURES)
        list(APPEND MINGW64_CXX14_COMPILE_FEATURES cxx_std_14)
        list(APPEND MINGW64_CXX14_COMPILE_FEATURES cxx_aggregate_default_initializers)
        list(APPEND MINGW64_CXX14_COMPILE_FEATURES cxx_attribute_deprecated)
        list(APPEND MINGW64_CXX14_COMPILE_FEATURES cxx_binary_literals)
        list(APPEND MINGW64_CXX14_COMPILE_FEATURES cxx_contextual_conversions)
        list(APPEND MINGW64_CXX14_COMPILE_FEATURES cxx_decltype_auto)
        list(APPEND MINGW64_CXX14_COMPILE_FEATURES cxx_digit_separators)
        list(APPEND MINGW64_CXX14_COMPILE_FEATURES cxx_generic_lambdas)
        list(APPEND MINGW64_CXX14_COMPILE_FEATURES cxx_lambda_init_captures)
        list(APPEND MINGW64_CXX14_COMPILE_FEATURES cxx_relaxed_constexpr)
        list(APPEND MINGW64_CXX14_COMPILE_FEATURES cxx_return_type_deduction)
        list(APPEND MINGW64_CXX14_COMPILE_FEATURES cxx_variable_templates)
        set(MINGW64_CXX14_COMPILE_FEATURES "${MINGW64_CXX14_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_CXX14_COMPILE_FEATURES)

        set(MINGW64_CXX17_COMPILE_FEATURES)
        list(APPEND MINGW64_CXX17_COMPILE_FEATURES cxx_std_17)
        set(MINGW64_CXX17_COMPILE_FEATURES "${MINGW64_CXX17_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_CXX17_COMPILE_FEATURES)

        set(MINGW64_CXX20_COMPILE_FEATURES)
        list(APPEND MINGW64_CXX20_COMPILE_FEATURES cxx_std_20)
        set(MINGW64_CXX20_COMPILE_FEATURES "${MINGW64_CXX20_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_CXX20_COMPILE_FEATURES)

        set(MINGW64_CXX23_COMPILE_FEATURES)
        list(APPEND MINGW64_CXX23_COMPILE_FEATURES cxx_std_23)
        set(MINGW64_CXX23_COMPILE_FEATURES "${MINGW64_CXX23_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_CXX23_COMPILE_FEATURES)

        set(MINGW64_CXX_COMPILE_FEATURES)
        list(APPEND MINGW64_CXX_COMPILE_FEATURES "${MINGW64_CXX98_COMPILE_FEATURES}")
        list(APPEND MINGW64_CXX_COMPILE_FEATURES "${MINGW64_CXX11_COMPILE_FEATURES}")
        list(APPEND MINGW64_CXX_COMPILE_FEATURES "${MINGW64_CXX14_COMPILE_FEATURES}")
        list(APPEND MINGW64_CXX_COMPILE_FEATURES "${MINGW64_CXX17_COMPILE_FEATURES}")
        list(APPEND MINGW64_CXX_COMPILE_FEATURES "${MINGW64_CXX20_COMPILE_FEATURES}")
        list(APPEND MINGW64_CXX_COMPILE_FEATURES "${MINGW64_CXX23_COMPILE_FEATURES}")
        set(MINGW64_CXX_COMPILE_FEATURES "${MINGW64_CXX_COMPILE_FEATURES}")
        mark_as_advanced(MINGW64_CXX_COMPILE_FEATURES)

        set(MINGW64_CXX_IMPLICIT_INCLUDE_DIRECTORIES)
        list(APPEND MINGW64_CXX_IMPLICIT_INCLUDE_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/include/c++/${MINGW64_CXX_COMPILER_VERSION}/x86_64-w64-mingw32")
        list(APPEND MINGW64_CXX_IMPLICIT_INCLUDE_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/include/c++/${MINGW64_CXX_COMPILER_VERSION}")
        list(APPEND MINGW64_CXX_IMPLICIT_INCLUDE_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/include/c++/${MINGW64_CXX_COMPILER_VERSION}/backward")
        list(APPEND MINGW64_CXX_IMPLICIT_INCLUDE_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/lib/gcc/x86_64-w64-mingw32/${MINGW64_CXX_COMPILER_VERSION}/include")
        list(APPEND MINGW64_CXX_IMPLICIT_INCLUDE_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/include")
        list(APPEND MINGW64_CXX_IMPLICIT_INCLUDE_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/lib/gcc/x86_64-w64-mingw32/${MINGW64_CXX_COMPILER_VERSION}/include-fixed")
        set(MINGW64_CXX_IMPLICIT_INCLUDE_DIRECTORIES "${MINGW64_CXX_IMPLICIT_INCLUDE_DIRECTORIES}")
        mark_as_advanced(MINGW64_CXX_IMPLICIT_INCLUDE_DIRECTORIES)

        set(MINGW64_CXX_IMPLICIT_LINK_DIRECTORIES)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/lib/gcc/x86_64-w64-mingw32/${MINGW64_CXX_COMPILER_VERSION}")
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/lib/gcc")
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/x86_64-w64-mingw32/lib")
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_DIRECTORIES "${Z_MINGW64_ROOT_DIR}/lib")
        set(MINGW64_CXX_IMPLICIT_LINK_DIRECTORIES "${MINGW64_CXX_IMPLICIT_LINK_DIRECTORIES}")
        mark_as_advanced(MINGW64_CXX_IMPLICIT_LINK_DIRECTORIES)

        set(MINGW64_CXX_IMPLICIT_LINK_LIBRARIES)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_LIBRARIES stdc++)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_LIBRARIES mingw32gcc_s)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_LIBRARIES gcc)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_LIBRARIES moldname)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_LIBRARIES mingwex)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_LIBRARIES pthread)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_LIBRARIES advapi32)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_LIBRARIES shell32)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_LIBRARIES user32)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_LIBRARIES kernel32)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_LIBRARIES mingw32)
        list(APPEND MINGW64_CXX_IMPLICIT_LINK_LIBRARIES gcc_s)
        set(MINGW64_CXX_IMPLICIT_LINK_LIBRARIES "${MINGW64_CXX_IMPLICIT_LINK_LIBRARIES}")
        mark_as_advanced(MINGW64_CXX_IMPLICIT_LINK_LIBRARIES)

        set(MINGW64_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")
        mark_as_advanced(MINGW64_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES)

        set(MINGW64_CXX_SOURCE_FILE_EXTENSIONS)
        list(APPEND MINGW64_CXX_SOURCE_FILE_EXTENSIONS C)
        list(APPEND MINGW64_CXX_SOURCE_FILE_EXTENSIONS M)
        list(APPEND MINGW64_CXX_SOURCE_FILE_EXTENSIONS c++)
        list(APPEND MINGW64_CXX_SOURCE_FILE_EXTENSIONS cc)
        list(APPEND MINGW64_CXX_SOURCE_FILE_EXTENSIONS cpp)
        list(APPEND MINGW64_CXX_SOURCE_FILE_EXTENSIONS cxx)
        list(APPEND MINGW64_CXX_SOURCE_FILE_EXTENSIONS m)
        list(APPEND MINGW64_CXX_SOURCE_FILE_EXTENSIONS mm)
        list(APPEND MINGW64_CXX_SOURCE_FILE_EXTENSIONS mpp)
        list(APPEND MINGW64_CXX_SOURCE_FILE_EXTENSIONS CPP)
        list(APPEND MINGW64_CXX_SOURCE_FILE_EXTENSIONS ixx)
        list(APPEND MINGW64_CXX_SOURCE_FILE_EXTENSIONS cppm)
        set(MINGW64_CXX_SOURCE_FILE_EXTENSIONS "${MINGW64_CXX_SOURCE_FILE_EXTENSIONS}")
        mark_as_advanced(MINGW64_CXX_SOURCE_FILE_EXTENSIONS)

        set(MINGW64_CXX_IGNORE_EXTENSIONS)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS inl)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS h)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS hpp)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS HPP)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS H)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS o)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS O)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS obj)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS OBJ)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS def)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS DEF)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS rc)
        list(APPEND MINGW64_CXX_IGNORE_EXTENSIONS RC)
        set(MINGW64_CXX_IGNORE_EXTENSIONS "${MINGW64_CXX_IGNORE_EXTENSIONS}")
        mark_as_advanced(MINGW64_CXX_IGNORE_EXTENSIONS)

        foreach (lang C OBJC OBJCXX)
            if (MINGW64_${lang}_COMPILER_ID_RUN)
                foreach(extension IN LISTS MINGW64_${lang}_SOURCE_FILE_EXTENSIONS)
                    list(REMOVE_ITEM MINGW64_CXX_SOURCE_FILE_EXTENSIONS ${extension})
                endforeach()
            endif()
        endforeach()

        set(MINGW64_CXX_CL_SHOWINCLUDES_PREFIX "")
        if(MINGW64_CXX_CL_SHOWINCLUDES_PREFIX)
            set(MINGW64_CL_SHOWINCLUDES_PREFIX "${MINGW64_CXX_CL_SHOWINCLUDES_PREFIX}")
            mark_as_advanced(MINGW64_CXX_CL_SHOWINCLUDES_PREFIX)
        endif()

        set(MINGW64_CXX_FLAGS)
        string(APPEND MINGW64_CXX_FLAGS "-march=nocona ")
        string(APPEND MINGW64_CXX_FLAGS "-msahf ")
        string(APPEND MINGW64_CXX_FLAGS "-mtune=generic ")
        string(APPEND MINGW64_CXX_FLAGS "-pipe ")
        set(MINGW64_CXX_FLAGS "${MINGW64_CXX_FLAGS}")
        mark_as_advanced(MINGW64_CXX_FLAGS)

        set(MINGW64_CXX_FLAGS_DEBUG)
        string(APPEND MINGW64_CXX_FLAGS_DEBUG " -ggdb ")
        string(APPEND MINGW64_CXX_FLAGS_DEBUG " -Og ")
        set(MINGW64_CXX_FLAGS_DEBUG "${MINGW64_CXX_FLAGS_DEBUG}")
        mark_as_advanced(MINGW64_CXX_FLAGS_DEBUG)

        set(MINGW64_CXX_FLAGS_RELEASE)
        string(APPEND MINGW64_CXX_FLAGS_RELEASE " -O2 ")
        string(APPEND MINGW64_CXX_FLAGS_RELEASE " -DNDEBUG ")
        set(MINGW64_CXX_FLAGS_RELEASE "${MINGW64_CXX_FLAGS_RELEASE}")
        mark_as_advanced(MINGW64_CXX_FLAGS_RELEASE)

        set(MINGW64_CXX_FLAGS_MINSIZEREL)
        string(APPEND MINGW64_CXX_FLAGS_MINSIZEREL " -Os ")
        string(APPEND MINGW64_CXX_FLAGS_MINSIZEREL " -DNDEBUG ")
        set(MINGW64_CXX_FLAGS_MINSIZEREL "${MINGW64_CXX_FLAGS_MINSIZEREL}")
        mark_as_advanced(MINGW64_CXX_FLAGS_MINSIZEREL)

        set(MINGW64_CXX_FLAGS_RELWITHDEBINFO)
        string(APPEND MINGW64_CXX_FLAGS_RELWITHDEBINFO " -ggdb ")
        string(APPEND MINGW64_CXX_FLAGS_RELWITHDEBINFO " -O2 ")
        set(MINGW64_CXX_FLAGS_RELWITHDEBINFO "${MINGW64_CXX_FLAGS_RELWITHDEBINFO}")
        mark_as_advanced(MINGW64_CXX_FLAGS_RELWITHDEBINFO)

    endif() # if(NOT _MINGW64_CXX_COMPILER_ID_RUN)

    include("${CMAKE_CURRENT_LIST_DIR}/profiles/MINGW64/MINGW64-RCCompiler.cmake")

    # ###########################################################################
    # # CMake vars...
    # ###########################################################################

    foreach(lang C CXX)
        set(CMAKE_${lang}_COMPILER_TARGET "x86_64-w64-mingw32" CACHE STRING "The target for cross-compiling, if supported. '--target=x86_64-w64-mingw32'")
    endforeach()

    find_program(CMAKE_C_COMPILER "${MINGW64_C_COMPILER}")
    find_program(CMAKE_CXX_COMPILER "${MINGW64_CXX_COMPILER}")
    find_program(CMAKE_RC_COMPILER "${MINGW64_RC_COMPILER}")

    if(NOT CMAKE_RC_COMPILER)
        find_program (CMAKE_RC_COMPILER "${Z_MINGW64_ROOT_DIR}/bin/windres")
        if(NOT CMAKE_RC_COMPILER)
            find_program (CMAKE_RC_COMPILER "windres")
        endif()
    endif()

    mark_as_advanced(CMAKE_C_COMPILER)
    mark_as_advanced(CMAKE_CXX_COMPILER)
    mark_as_advanced(CMAKE_RC_COMPILER)

    foreach(lang C CXX)
        set(CMAKE_${lang}_COMPILER_TARGET "${CMAKE_SYSTEM_PROCESSOR}-w64-mingw32" CACHE STRING "The target for cross-compiling, if supported. '--target=x86_64-w64-mingw32'")
    endforeach()

    set(CMAKE_RC_COMPILER_TARGET "${CMAKE_SYSTEM_PROCESSOR}-w64-mingw32" CACHE STRING "The target for cross-compiling, if supported. '--target=x86_64-w64-mingw32'")

    get_property( _CMAKE_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE )

    # The following flags come from 'PORT' files (i.e., build config files for packages)

    if(NOT _CMAKE_IN_TRY_COMPILE)

        string(APPEND CMAKE_C_FLAGS_INIT " ${MSYS_C_FLAGS} ")
        string(APPEND CMAKE_C_FLAGS_DEBUG_INIT " ${MSYS_C_FLAGS_DEBUG} ")
        string(APPEND CMAKE_C_FLAGS_RELEASE_INIT " ${MSYS_C_FLAGS_RELEASE} ")
        string(APPEND CMAKE_C_FLAGS_MINSIZEREL_INIT " ${MSYS_C_FLAGS_MINSIZEREL} ")
        string(APPEND CMAKE_C_FLAGS_RELWITHDEBINFO_INIT " ${MSYS_C_FLAGS_RELWITHDEBINFO} ")

        string(APPEND CMAKE_CXX_FLAGS_INIT " ${MSYS_CXX_FLAGS} ")
        string(APPEND CMAKE_CXX_FLAGS_DEBUG_INIT " ${MSYS_CXX_FLAGS_DEBUG} ")
        string(APPEND CMAKE_CXX_FLAGS_RELEASE_INIT " ${MSYS_CXX_FLAGS_RELEASE} ")
        string(APPEND CMAKE_CXX_FLAGS_MINSIZEREL_INIT " ${MSYS_CXX_FLAGS_MINSIZEREL} ")
        string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT " ${MSYS_CXX_FLAGS_RELWITHDEBINFO} ")

        string(APPEND CMAKE_RC_FLAGS_INIT " ${MSYS_RC_FLAGS} ")
        string(APPEND CMAKE_RC_FLAGS_DEBUG_INIT " ${MSYS_RC_FLAGS_DEBUG} ")
        string(APPEND CMAKE_RC_FLAGS_RELEASE_INIT " ${MSYS_RC_FLAGS_RELEASE} ")
        string(APPEND CMAKE_RC_FLAGS_MINSIZEREL_INIT " ${MSYS_RC_FLAGS_MINSIZEREL} ")
        string(APPEND CMAKE_RC_FLAGS_RELWITHDEBINFO_INIT " ${MSYS_RC_FLAGS_RELWITHDEBINFO} ")

        string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT " ${MSYS_LINKER_FLAGS} ")
        string(APPEND CMAKE_STATIC_LINKER_FLAGS_INIT " ${MSYS_LINKER_FLAGS} ")
        string(APPEND CMAKE_MODULE_LINKER_FLAGS_INIT " ${MSYS_LINKER_FLAGS} ")
        string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT " ${MSYS_LINKER_FLAGS} ")

        if(MINGW64_CRT_LINKAGE STREQUAL "static")
            string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT "-static ")
            string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT "-static ")
        endif()

        string(APPEND CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT " ${MSYS_LINKER_FLAGS_DEBUG} ")
        string(APPEND CMAKE_SHARED_LINKER_FLAGS_RELEASE_INIT " ${MSYS_LINKER_FLAGS_RELEASE} ")
        string(APPEND CMAKE_SHARED_LINKER_FLAGS_MINSIZEREL_INIT " ${MSYS_LINKER_FLAGS_MINSIZEREL} ")
        string(APPEND CMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO_INIT " ${MSYS_LINKER_FLAGS_RELWITHDEBINFO} ")

        string(APPEND CMAKE_STATIC_LINKER_FLAGS_DEBUG_INIT " ${MSYS_LINKER_FLAGS_DEBUG} ")
        string(APPEND CMAKE_STATIC_LINKER_FLAGS_RELEASE_INIT " ${MSYS_LINKER_FLAGS_RELEASE} ")
        string(APPEND CMAKE_STATIC_LINKER_FLAGS_MINSIZEREL_INIT " ${MSYS_LINKER_FLAGS_MINSIZEREL} ")
        string(APPEND CMAKE_STATIC_LINKER_FLAGS_RELWITHDEBINFO_INIT " ${MSYS_LINKER_FLAGS_RELWITHDEBINFO} ")

        string(APPEND CMAKE_MODULE_LINKER_FLAGS_DEBUG_INIT " ${MSYS_LINKER_FLAGS_DEBUG} ")
        string(APPEND CMAKE_MODULE_LINKER_FLAGS_RELEASE_INIT " ${MSYS_LINKER_FLAGS_RELEASE} ")
        string(APPEND CMAKE_MODULE_LINKER_FLAGS_MINSIZEREL_INIT " ${MSYS_LINKER_FLAGS_MINSIZEREL} ")
        string(APPEND CMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO_INIT " ${MSYS_LINKER_FLAGS_RELWITHDEBINFO} ")

        string(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT " ${MSYS_LINKER_FLAGS_DEBUG} ")
        string(APPEND CMAKE_EXE_LINKER_FLAGS_RELEASE_INIT " ${MSYS_LINKER_FLAGS_RELEASE} ")
        string(APPEND CMAKE_EXE_LINKER_FLAGS_MINSIZEREL_INIT " ${MSYS_LINKER_FLAGS_MINSIZEREL} ")
        string(APPEND CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO_INIT " ${MSYS_LINKER_FLAGS_RELWITHDEBINFO} ")

    endif()

    # get_property( _MSYS_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE )

    # if(NOT _MSYS_IN_TRY_COMPILE)

    #     string(APPEND CMAKE_SHARED_LINKER_FLAGS_INIT " ${LDFLAGS} ${STRIP_SHARED} ") # These strip flags should be enabled via cmake options...
    #     string(APPEND CMAKE_EXE_LINKER_FLAGS_INIT " ${LDFLAGS} ${STRIP_BINARIES} ")

    #     string(APPEND CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT " ${LDFLAGS_DEBUG} ")
    #     string(APPEND CMAKE_SHARED_LINKER_FLAGS_RELEASE_INIT " ${LDFLAGS_RELEASE} ")

    #     string(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT " ${LDFLAGS_DEBUG} ")
    #     string(APPEND CMAKE_EXE_LINKER_FLAGS_RELEASE_INIT " ${LDFLAGS_RELEASE} ")

    # endif() # (NOT _MSYS_IN_TRY_COMPILE)

    message(STATUS "MinGW x64 toolchain loaded")

endif()
