message("Loading ${CMAKE_CURRENT_LIST_FILE}")

string(COMPARE NOTEQUAL "${TARGET_TRIPLET}" "${HOST_TRIPLET}" MSYS_CROSSCOMPILING)
#Helper variable to identify the Target system. MSYS_TARGET_IS_<targetname>
if (NOT DEFINED MSYS_CMAKE_SYSTEM_NAME OR MSYS_CMAKE_SYSTEM_NAME STREQUAL "")
    set(MSYS_TARGET_IS_WINDOWS ON)

    if(DEFINED MSYS_XBOX_CONSOLE_TARGET AND NOT "${MSYS_XBOX_CONSOLE_TARGET}" STREQUAL "")
        set(MSYS_TARGET_IS_XBOX ON)
    endif()
elseif(MSYS_CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
    set(MSYS_TARGET_IS_WINDOWS ON)
    set(MSYS_TARGET_IS_UWP ON)
elseif(MSYS_CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(MSYS_TARGET_IS_OSX ON)
elseif(MSYS_CMAKE_SYSTEM_NAME STREQUAL "iOS")
    set(MSYS_TARGET_IS_IOS ON)
elseif(MSYS_CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(MSYS_TARGET_IS_LINUX ON)
elseif(MSYS_CMAKE_SYSTEM_NAME STREQUAL "Android")
    set(MSYS_TARGET_IS_ANDROID ON)
elseif(MSYS_CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
    set(MSYS_TARGET_IS_FREEBSD ON)
elseif(MSYS_CMAKE_SYSTEM_NAME STREQUAL "OpenBSD")
    set(MSYS_TARGET_IS_OPENBSD ON)
elseif(MSYS_CMAKE_SYSTEM_NAME STREQUAL "MinGW")
    set(MSYS_TARGET_IS_WINDOWS ON)
    set(MSYS_TARGET_IS_MINGW ON)
elseif(MSYS_CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
    set(MSYS_TARGET_IS_EMSCRIPTEN ON)
endif()

#Helper variables to identify the host system name
if (CMAKE_HOST_WIN32)
    set(MSYS_HOST_IS_WINDOWS ON)
elseif (CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin")
    set(MSYS_HOST_IS_OSX ON)
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
    set(MSYS_HOST_IS_LINUX ON)
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "FreeBSD")
    set(MSYS_HOST_IS_FREEBSD ON)
elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL "OpenBSD")
    set(MSYS_HOST_IS_OPENBSD ON)
endif()

#Helper variable to identify the host path separator.
if(CMAKE_HOST_WIN32)
    set(MSYS_HOST_PATH_SEPARATOR ";")
elseif(CMAKE_HOST_UNIX)
    set(MSYS_HOST_PATH_SEPARATOR ":")
endif()

#Helper variables to identify executables on host/target
if(CMAKE_HOST_WIN32)
    set(MSYS_HOST_EXECUTABLE_SUFFIX ".exe")
else()
    set(MSYS_HOST_EXECUTABLE_SUFFIX "")
endif()
#set(CMAKE_EXECUTABLE_SUFFIX ${MSYS_HOST_EXECUTABLE_SUFFIX}) not required by find_program

if(MSYS_TARGET_IS_WINDOWS)
    set(MSYS_TARGET_EXECUTABLE_SUFFIX ".exe")
else()
    set(MSYS_TARGET_EXECUTABLE_SUFFIX "")
endif()

#Helper variables to identify bundles on host/target
if(MSYS_HOST_IS_OSX)
    set(MSYS_HOST_BUNDLE_SUFFIX ".app")
else()
    set(MSYS_HOST_BUNDLE_SUFFIX "")
endif()

if(MSYS_TARGET_IS_OSX OR MSYS_TARGET_IS_IOS)
    set(MSYS_TARGET_BUNDLE_SUFFIX ".app")
else()
    set(MSYS_TARGET_BUNDLE_SUFFIX "")
endif()

#Helper variables for libraries
if(MSYS_TARGET_IS_MINGW)
    set(MSYS_TARGET_STATIC_LIBRARY_SUFFIX ".a")
    set(MSYS_TARGET_IMPORT_LIBRARY_SUFFIX ".dll.a")
    set(MSYS_TARGET_SHARED_LIBRARY_SUFFIX ".dll")
    set(MSYS_TARGET_STATIC_LIBRARY_PREFIX "lib")
    set(MSYS_TARGET_SHARED_LIBRARY_PREFIX "lib")
    set(MSYS_TARGET_IMPORT_LIBRARY_PREFIX "lib")
    set(MSYS_FIND_LIBRARY_SUFFIXES ".dll" ".dll.a" ".a" ".lib")
    set(MSYS_FIND_LIBRARY_PREFIXES "lib" "")
elseif(MSYS_TARGET_IS_WINDOWS)
    set(MSYS_TARGET_STATIC_LIBRARY_SUFFIX ".lib")
    set(MSYS_TARGET_IMPORT_LIBRARY_SUFFIX ".lib")
    set(MSYS_TARGET_SHARED_LIBRARY_SUFFIX ".dll")
    set(MSYS_TARGET_IMPORT_LIBRARY_SUFFIX ".lib")
    set(MSYS_TARGET_STATIC_LIBRARY_PREFIX "")
    set(MSYS_TARGET_SHARED_LIBRARY_PREFIX "")
    set(MSYS_TARGET_IMPORT_LIBRARY_PREFIX "")
    set(MSYS_FIND_LIBRARY_SUFFIXES ".lib" ".dll") #This is a slight modification to CMakes value which does not include ".dll".
    set(MSYS_FIND_LIBRARY_PREFIXES "" "lib") #This is a slight modification to CMakes value which does not include "lib".
elseif(MSYS_TARGET_IS_OSX)
    set(MSYS_TARGET_STATIC_LIBRARY_SUFFIX ".a")
    set(MSYS_TARGET_IMPORT_LIBRARY_SUFFIX "")
    set(MSYS_TARGET_SHARED_LIBRARY_SUFFIX ".dylib")
    set(MSYS_TARGET_STATIC_LIBRARY_PREFIX "lib")
    set(MSYS_TARGET_SHARED_LIBRARY_PREFIX "lib")
    set(MSYS_FIND_LIBRARY_SUFFIXES ".tbd" ".dylib" ".so" ".a")
    set(MSYS_FIND_LIBRARY_PREFIXES "lib" "")
else()
    set(MSYS_TARGET_STATIC_LIBRARY_SUFFIX ".a")
    set(MSYS_TARGET_IMPORT_LIBRARY_SUFFIX "")
    set(MSYS_TARGET_SHARED_LIBRARY_SUFFIX ".so")
    set(MSYS_TARGET_STATIC_LIBRARY_PREFIX "lib")
    set(MSYS_TARGET_SHARED_LIBRARY_PREFIX "lib")
    set(MSYS_FIND_LIBRARY_SUFFIXES ".so" ".a")
    set(MSYS_FIND_LIBRARY_PREFIXES "lib" "")
endif()
#Setting these variables allows find_library to work in script mode and thus in portfiles!
#This allows us scale down on hardcoded target dependent paths in portfiles
set(CMAKE_STATIC_LIBRARY_SUFFIX "${MSYS_TARGET_STATIC_LIBRARY_SUFFIX}")
set(CMAKE_SHARED_LIBRARY_SUFFIX "${MSYS_TARGET_SHARED_LIBRARY_SUFFIX}")
set(CMAKE_IMPORT_LIBRARY_SUFFIX "${MSYS_TARGET_IMPORT_LIBRARY_SUFFIX}")
set(CMAKE_STATIC_LIBRARY_PREFIX "${MSYS_TARGET_STATIC_LIBRARY_PREFIX}")
set(CMAKE_SHARED_LIBRARY_PREFIX "${MSYS_TARGET_SHARED_LIBRARY_PREFIX}")
set(CMAKE_IMPORT_LIBRARY_PREFIX "${MSYS_TARGET_IMPORT_LIBRARY_PREFIX}")

set(CMAKE_FIND_LIBRARY_SUFFIXES "${MSYS_FIND_LIBRARY_SUFFIXES}" CACHE INTERNAL "") # Required by find_library
set(CMAKE_FIND_LIBRARY_PREFIXES "${MSYS_FIND_LIBRARY_PREFIXES}" CACHE INTERNAL "") # Required by find_library

# Append platform libraries to MSYS_SYSTEM_LIBRARIES
# The variable are just appended to permit to custom triplets define the variable

# Platforms with libdl
if(MSYS_TARGET_IS_LINUX OR MSYS_TARGET_IS_ANDROID OR MSYS_TARGET_IS_OSX)
    list(APPEND MSYS_SYSTEM_LIBRARIES dl)
endif()

# Platforms with libm
if(MSYS_TARGET_IS_LINUX OR MSYS_TARGET_IS_ANDROID OR MSYS_TARGET_IS_FREEBSD OR MSYS_TARGET_IS_OPENBSD OR MSYS_TARGET_IS_OSX OR MSYS_TARGET_IS_MINGW)
    list(APPEND MSYS_SYSTEM_LIBRARIES m)
endif()

# Platforms with pthread
if(MSYS_TARGET_IS_LINUX OR MSYS_TARGET_IS_ANDROID OR MSYS_TARGET_IS_OSX OR MSYS_TARGET_IS_FREEBSD OR MSYS_TARGET_IS_OPENBSD OR MSYS_TARGET_IS_MINGW)
    list(APPEND MSYS_SYSTEM_LIBRARIES pthread)
endif()

# Platforms with libstdc++
if(MSYS_TARGET_IS_LINUX OR MSYS_TARGET_IS_ANDROID OR MSYS_TARGET_IS_FREEBSD OR MSYS_TARGET_IS_OPENBSD OR MSYS_TARGET_IS_MINGW)
    list(APPEND MSYS_SYSTEM_LIBRARIES [[stdc\+\+]])
endif()

# Platforms with libc++
if(MSYS_TARGET_IS_OSX)
    list(APPEND MSYS_SYSTEM_LIBRARIES [[c\+\+]])
endif()

# Platforms with librt
if(MSYS_TARGET_IS_LINUX OR MSYS_TARGET_IS_ANDROID OR MSYS_TARGET_IS_OSX OR MSYS_TARGET_IS_FREEBSD OR MSYS_TARGET_IS_MINGW)
    list(APPEND MSYS_SYSTEM_LIBRARIES rt)
endif()

# Platforms with GCC libs
if(MSYS_TARGET_IS_LINUX OR MSYS_TARGET_IS_ANDROID OR MSYS_TARGET_IS_OSX OR MSYS_TARGET_IS_FREEBSD OR MSYS_TARGET_IS_OPENBSD OR MSYS_TARGET_IS_MINGW)
    list(APPEND MSYS_SYSTEM_LIBRARIES gcc)
    list(APPEND MSYS_SYSTEM_LIBRARIES gcc_s)
endif()

# Platforms with system iconv
if(MSYS_TARGET_IS_OSX)
    list(APPEND MSYS_SYSTEM_LIBRARIES iconv)
endif()

# Windows system libs
if(MSYS_TARGET_IS_WINDOWS)
    list(APPEND MSYS_SYSTEM_LIBRARIES advapi32)
    list(APPEND MSYS_SYSTEM_LIBRARIES bcrypt)
    list(APPEND MSYS_SYSTEM_LIBRARIES dinput8)
    list(APPEND MSYS_SYSTEM_LIBRARIES gdi32)
    list(APPEND MSYS_SYSTEM_LIBRARIES imm32)
    list(APPEND MSYS_SYSTEM_LIBRARIES oleaut32)
    list(APPEND MSYS_SYSTEM_LIBRARIES ole32)
    list(APPEND MSYS_SYSTEM_LIBRARIES psapi)
    list(APPEND MSYS_SYSTEM_LIBRARIES secur32)
    list(APPEND MSYS_SYSTEM_LIBRARIES setupapi)
    list(APPEND MSYS_SYSTEM_LIBRARIES shell32)
    list(APPEND MSYS_SYSTEM_LIBRARIES shlwapi)
    list(APPEND MSYS_SYSTEM_LIBRARIES strmiids)
    list(APPEND MSYS_SYSTEM_LIBRARIES user32)
    list(APPEND MSYS_SYSTEM_LIBRARIES uuid)
    list(APPEND MSYS_SYSTEM_LIBRARIES version)
    list(APPEND MSYS_SYSTEM_LIBRARIES vfw32)
    list(APPEND MSYS_SYSTEM_LIBRARIES winmm)
    list(APPEND MSYS_SYSTEM_LIBRARIES wsock32)
    list(APPEND MSYS_SYSTEM_LIBRARIES Ws2_32)
    list(APPEND MSYS_SYSTEM_LIBRARIES wldap32)
    list(APPEND MSYS_SYSTEM_LIBRARIES crypt32)
endif()
